{"version":3,"sources":["components/ThreeContainer.js","threejs/ThreeEntryPoint.js","App.js","serviceWorker.js","index.js"],"names":["ThreeContainer","sceneRef","viewPortDiv","document","getElementById","scene","THREE","background","camera","offsetWidth","offsetHeight","position","z","renderer","antialias","setSize","appendChild","domElement","camControls","FirstPersonControls","lookSpeed","movementSpeed","material","color","emissive","specular","metalness","roughness","mesh","depthWrite","rotation","x","Math","PI","receiveShadow","y","add","FBXLoader","load","object","traverse","child","isMesh","castShadow","scale","ambientLight","directionalLight","listener","sound","buffer","setBuffer","setLoop","setVolume","play","clock","animate","requestAnimationFrame","update","getDelta","render","ThreeEntryPoint","this","ref","element","Component","App","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5598919e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ThreeEntryPoint from '../threejs/ThreeEntryPoint';\n\nexport default class ThreeContainer extends Component {\n\n  componentDidMount() {\n    ThreeEntryPoint(this.scene);\n  }\n\n  render() {\n    return (\n      <>\n        <div ref={element => this.scene = element} />\n      </>\n    );\n  }\n}","// Import dependencies\nimport * as THREE from 'three';\nimport { FirstPersonControls } from 'three/examples/jsm/controls/FirstPersonControls.js';\nimport * as FBXLoader from 'three/examples/jsm/loaders/FBXLoader.js';\n\n\nexport default function ThreeEntryPoint(sceneRef) {\n\n  var viewPortDiv = document.getElementById(\"3js1\");\n\n\tlet mixer;\n  // Create Scene\n  const scene = new THREE.Scene();\n  scene.background = new THREE.Color(0.08,0.184,0.23);\n\n  // Define a camera, set it to fill the browser window and position it\n  const camera = new THREE.PerspectiveCamera(45, viewPortDiv.offsetWidth/ viewPortDiv.offsetHeight, 0.1, 10000);\n  camera.position.z = 5;\n\n\n\n  // Define a renderer, and set it to fill the browser window\nconst renderer = new THREE.WebGLRenderer({antialias:true});\n//  document.getElementById(\"3js1\").innerHTML=viewPortDiv.width;\n  renderer.setSize(viewPortDiv.offsetWidth, viewPortDiv.offsetHeight);\n\n  // Get an element from the DOM and append renderer.domElement to it\n  sceneRef.appendChild(renderer.domElement);\n\n\n        var camControls = new FirstPersonControls(camera);\ncamControls.lookSpeed = 0.1;\ncamControls.movementSpeed = 10;\n\n  // Define (or import) your object's geometry\n  const geometry = new THREE.SphereGeometry( 5, 6, 6 );\n\n  // Define your object's material\n  const material = new THREE.MeshStandardMaterial({\n    color: new THREE.Color(0,0.25,0.65),\n    emissive: 0x111111,\n    specular: 0xffffff,\n    metalness: 0.45,\n    roughness: 0.05,\n  });\n\n\tconst mesh = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2000, 2000 ), new THREE.MeshPhongMaterial( { color: 0x999999, depthWrite: false } ) );\n\t\t\t\tmesh.rotation.x = - Math.PI / 2;\n\t\t\t\tmesh.receiveShadow = true;\n\t\t\t\tmesh.position.y = -25;\n\t\t\t\tscene.add( mesh );\n\n\n\t\t\t\tconst grid = new THREE.GridHelper( 2000, 20, 0x000000, 0x000000 );\n\t\t\t\tgrid.material = material;\n\t\t\t\t//scene.add( grid );\n\nvar cb = 1;\n\t\t\t\t// model\n\t\t\t\tconst loader = new FBXLoader.FBXLoader();\n\t\t\t\tloader.load( './models/test.fbx', function ( object ) {\n\n\t\t\t\t\t//mixer = new THREE.AnimationMixer( object );\n\n\t\t\t\t//\tconst action = mixer.clipAction( object.animations[ 0 ] );\n\t\t\t\t//\taction.play();\n\t   \n\t\t\t\t\tobject.traverse( function ( child ) {\n\t\t\n\t\t\t\t\t\tif ( child.isMesh ) {\n\n\t\t\t\t\t\t\tchild.castShadow = true;\n\t\t\t\t\t\t\tchild.receiveShadow = true;\n\t\t\t\t\t\t\tchild.scale.x = 0.05;\n\t\t\t\t\t\t\tchild.scale.y=0.05;\n\t\t\t\t\t\t\tchild.scale.z=0.05;\n\t\t\t\t\t\t\tchild.material = material;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\t\tcb = object;\n\t\t\t\t\t\n\t\t\t\t\tscene.add( object );\n\n\t\t\t\t} );\n\nconst ambientLight = new THREE.AmbientLight( new THREE.Color(0.5,0.5,0.5)); // soft white light\n\nscene.add(ambientLight);\n\nconst directionalLight = new THREE.DirectionalLight();\ndirectionalLight.position.x=3;directionalLight.position.y=4;\nscene.add(directionalLight);\n\n\n\nconst listener = new THREE.AudioListener();\ncamera.add( listener );\n\n// create a global audio source\nconst sound = new THREE.Audio( listener );\n\n// load a sound and set it as the Audio object's buffer\nconst audioLoader = new THREE.AudioLoader();\naudioLoader.load( './music/test.mp3', function( buffer ) {\n\tsound.setBuffer( buffer );\n\tsound.setLoop( true );\n\tsound.setVolume( 0.5 );\n\tsound.play();\n});\n\n\nvar clock = new THREE.Clock(true);\n\n\n  // Create an animate function, which will allow you to render your scene and define any movements\n  const animate = function () {\n    requestAnimationFrame(animate);\n\n  camControls.update(clock.getDelta());\n   // mesh.rotation.x += 0.005;\n\n    // mesh.rotation.y += 0.005;\n    //mesh.rotation.z += 0.005;\n//if (cb!=1) cb.rotation.y += 0.005;\n    renderer.render(scene, camera);\n  };\n\n  // Call the animate function\n  animate();\n\n}","import React from 'react';\nimport './App.css';\nimport './index.css';\nimport ThreeContainer from './components/ThreeContainer';\n\nfunction App() {\n  return (\n  \n    <div>\n\t<div className=\"test\">\n\t\tCrystal Career\n\t</div>\n\t<div className = \"3js1\">\n\n      <ThreeContainer />\n    </div>\n\t</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('3js1'));\n//ReactDOM.render(<App />, document.getElementById('3js2'));\n//ReactDOM.render(<App />, document.getElementById('3js3'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();//unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/ThreeContainer.js","threejs/ThreeEntryPoint.js","App.js","serviceWorker.js","index.js"],"names":["ThreeContainer","sceneRef","viewPortDiv","document","getElementById","scene","THREE","background","camera","offsetWidth","offsetHeight","position","z","renderer","setSize","appendChild","domElement","controls","OrbitControls","target","set","rotateSpeed","update","material","color","emissive","specular","metalness","roughness","depthWrite","receiveShadow","cb","FBXLoader","load","object","traverse","child","isMesh","castShadow","scale","x","y","add","light","animate","requestAnimationFrame","rotation","render","ThreeEntryPoint","this","ref","element","Component","App","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5f12f80f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ThreeEntryPoint from '../threejs/ThreeEntryPoint';\n\nexport default class ThreeContainer extends Component {\n\n  componentDidMount() {\n    ThreeEntryPoint(this.scene);\n  }\n\n  render() {\n    return (\n      <>\n        <div ref={element => this.scene = element} />\n      </>\n    );\n  }\n}","// Import dependencies\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport * as FBXLoader from 'three/examples/jsm/loaders/FBXLoader.js';\nexport default function ThreeEntryPoint(sceneRef) {\n\t\n\n\t\n  var viewPortDiv = document.getElementById(\"3js1\");\n\n\tlet mixer;\n  // Create Scene\n  const scene = new THREE.Scene();\n  scene.background = new THREE.Color(0.08,0.44,0.64);\n\n  // Define a camera, set it to fill the browser window and position it\n  const camera = new THREE.PerspectiveCamera(75, viewPortDiv.offsetWidth/ viewPortDiv.offsetHeight, 0.1, 10000);\n  camera.position.z = 5;\n\n\n  // Define a renderer, and set it to fill the browser window\nconst renderer = new THREE.WebGLRenderer();\n//  document.getElementById(\"3js1\").innerHTML=viewPortDiv.width;\n  renderer.setSize(viewPortDiv.offsetWidth, viewPortDiv.offsetHeight);\n\n  // Get an element from the DOM and append renderer.domElement to it\n  sceneRef.appendChild(renderer.domElement);\n\n\n  // Add controls, targetting the same DOM element\n  let controls = new OrbitControls(camera, sceneRef);\n  controls.target.set(0, 0, 0);\n  controls.rotateSpeed = 0.5;\n  controls.update();\n\n  // Define (or import) your object's geometry\n  const geometry = new THREE.SphereGeometry( 5, 6, 6 );\n\n  // Define your object's material\n  const material = new THREE.MeshStandardMaterial({\n    color: new THREE.Color(0,0.25,0.65),\n    emissive: 0x111111,\n    specular: 0xffffff,\n    metalness: 0.45,\n    roughness: 0.05,\n  });\n\n\tconst mesh = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2000, 2000 ), new THREE.MeshPhongMaterial( { color: 0x999999, depthWrite: false } ) );\n\t\t\t\t//mesh.rotation.x = - Math.PI / 2;\n\t\t\t\tmesh.receiveShadow = true;\n\t\t\t\t//scene.add( mesh );\n\n\t\t\t\tconst grid = new THREE.GridHelper( 2000, 20, 0x000000, 0x000000 );\n\t\t\t\tgrid.material = material;\n\t\t\t\t//scene.add( grid );\n\nvar cb = 1;\n\t\t\t\t// model\n\t\t\t\tconst loader = new FBXLoader.FBXLoader();\n\t\t\t\tloader.load( './models/earth_lowpoly.fbx', function ( object ) {\n\n\t\t\t\t\t//mixer = new THREE.AnimationMixer( object );\n\n\t\t\t\t//\tconst action = mixer.clipAction( object.animations[ 0 ] );\n\t\t\t\t//\taction.play();\n\t   \n\t\t\t\t\tobject.traverse( function ( child ) {\n\t\t\n\t\t\t\t\t\tif ( child.isMesh ) {\n\n\t\t\t\t\t\t\tchild.castShadow = true;\n\t\t\t\t\t\t\tchild.receiveShadow = true;\n\t\t\t\t\t\t\tchild.scale.x = 0.5;\n\t\t\t\t\t\t\tchild.scale.y=0.5;\n\t\t\t\t\t\t\tchild.scale.z=0.5;\n\t\t\t\t\t\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\t\tcb = object;\n\t\t\t\t\t\n\t\t\t\t\tscene.add( object );\n\n\t\t\t\t} );\n\nconst light = new THREE.AmbientLight( new THREE.Color(0.5,0.5,0.5)); // soft white light\n\nscene.add( light );\n  // Create an animate function, which will allow you to render your scene and define any movements\n  const animate = function () {\n    requestAnimationFrame(animate);\n\n   // mesh.rotation.x += 0.005;\n\n    // mesh.rotation.y += 0.005;\n    //mesh.rotation.z += 0.005;\nif (cb!=1) cb.rotation.y += 0.005;\n    renderer.render(scene, camera);\n  };\n\n  // Call the animate function\n  animate();\n\n}","import React from 'react';\nimport './App.css';\nimport './index.css';\nimport ThreeContainer from './components/ThreeContainer';\n\nfunction App() {\n  return (\n  \n    <div>\n\t<div className=\"test\">\n\t\tResults Per State\n\t</div>\n\t<div className = \"3js1\">\n\n      <ThreeContainer />\n    </div>\n\t</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('3js1'));\nReactDOM.render(<App />, document.getElementById('3js2'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();//unregister();\n"],"sourceRoot":""}